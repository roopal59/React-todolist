{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qMC2B5BC,MAxBf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAC1B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAC/C,SAACC,GAAKZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAC9C,8BACE,kBAAC,IAAD,CACED,UAAU,UACVU,QAAS,WACPf,EAAMgB,WAAWZ,EAAKE,MAExBW,KAAK,gBAOjB,OAAO,6BAAMhB,I,eClBfiB,IAAQC,IAAIC,K,IA2FGC,E,kDArFb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAM,CACTpB,MAAM,GACNqB,YAAY,CACVb,KAAK,GACLJ,IAAI,KAIR,EAAKkB,YAAY,EAAKA,YAAYC,KAAjB,gBACrB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKT,WAAW,EAAKA,WAAWS,KAAhB,gBAChB,EAAKZ,UAAU,EAAKA,UAAUY,KAAf,gBAbK,E,wDAeNb,GACVe,KAAKC,SAAS,CACbL,YAAY,CACZb,KAAKE,EAAEE,OAAOL,MACdH,IAAIuB,KAAKC,W,8BAGJlB,GACNA,EAAEmB,iBACF,IAAMC,EAAQL,KAAKL,MAAMC,YAEzB,GADAU,QAAQC,IAAIF,GACM,KAAfA,EAAQtB,KAAU,CACnB,IAAMR,EAAM,GAAD,mBAAKyB,KAAKL,MAAMpB,OAAhB,CAAsB8B,IACjCL,KAAKC,SAAS,CACZ1B,MAAMA,EACNqB,YAAY,CACVb,KAAK,GACLJ,IAAI,S,iCAOCA,GACT,IAAO6B,EAAcR,KAAKL,MAAMpB,MAAMkC,QAAO,SAAAhC,GAAI,OAAEA,EAAKE,MAAMA,KAC9DqB,KAAKC,SAAS,CACZ1B,MAAMiC,M,gCAIFzB,EAAKJ,GACb,IAAMJ,EAAMyB,KAAKL,MAAMpB,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGlBiB,KAAKC,SAAS,CACZ1B,MAAMA,M,+BAIN,OACE,yBAAKG,UAAU,OACf,gCACC,0BAAOG,GAAG,aAAa6B,SAAUV,KAAKD,SACpC,2BAAOnB,KAAK,OAAO+B,YAAY,aAAa7B,MAAOkB,KAAKL,MAAMC,YAAYb,KAAKC,SAC9EgB,KAAKH,cACN,4BAAQjB,KAAK,UAAb,QAEF,2BAAIoB,KAAKL,MAAMpB,MAAMQ,OAItB,kBAAC,EAAD,CAAWR,MAAOyB,KAAKL,MAAMpB,MAAMc,WAAYW,KAAKX,WACpDH,UAAWc,KAAKd,iB,GAxEF0B,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.eea6ef02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nfunction ListItems(props) {\r\n  const items = props.items;\r\n  const listItems = items.map(item => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input type=\"text\" id={item.key} value={item.text} onChange={\r\n              (e)=>{props.setUpdate(e.target.value,item.key)}}/>\r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faicons\"\r\n              onClick={() => {\r\n                props.deleteItem(item.key)\r\n              }}\r\n              icon=\"trash\"\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return <div>{listItems}</div>;\r\n}\r\n\r\nexport default ListItems;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faTrash);\n\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n\n    }\n    this.handleInput=this.handleInput.bind(this);\nthis.addItem=this.addItem.bind(this);\nthis.deleteItem=this.deleteItem.bind(this);\nthis.setUpdate=this.setUpdate.bind(this);\n  }\n  handleInput(e){ \n    this.setState({\n     currentItem:{\n     text:e.target.value,\n     key:Date.now()\n    }});\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem=this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const items=[...this.state.items,newItem];\n      this.setState({\n        items:items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n        })\n        }\n\n      \n    }\n    deleteItem(key){\n      const  filteredItems=this.state.items.filter(item=>item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n\n    }\n  setUpdate(text,key){\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.key===key){\n        item.text=text;\n              }\n    })\nthis.setState({\n  items:items\n})\n  }\nrender(){\n  return (\n    <div className=\"App\">\n    <header>\n     < form id=\"to-do-form\" onSubmit={this.addItem}>\n       <input type=\"text\" placeholder=\"Enter text\" value={this.state.currentItem.text}onChange=\n       {this.handleInput}/>\n       <button type=\"submit\">Add</button>\n     </form>\n     <p>{this.state.items.text}</p>\n   \n    </header>\n\n    <ListItems items={this.state.items}deleteItem={this.deleteItem}\n    setUpdate={this.setUpdate}/>\n    \n    </div>\n\n\n\n  );\n}\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}